{"version":3,"sources":["Toggle/Toggle.js","App.js","calculate.js","index.js"],"names":["styleVaribles","nameVaribles","colorVaribles","Toggle","props","handleChange","Promise","resolve","setState","active","state","then","forEach","obj","document","body","style","setProperty","cssText","className","type","onChange","this","Component","ButtonsArrow","onClick","handleClick","ButtonNum","num","ButtonOperation","operation","InputField","placeholder","value","onKeyPress","event","key","calculateExpression","MessageErrorExpression","message","Calculator","resetError","mathExpression","currentTarget","history","slice","validateResult","validateMathExpression","result","str","reg","stack","_stack","x","y","searchIndexOperator","arr","includes","indexOperator1","indexOf","indexOperator2","length","indexOperator","res","splice","shift","unshift","calculateStack","string","conversionOperator","operator","splitString","split","currentNum","symbol","isNaN","match","push","createStack","error","console","log","calculate","isFinite","historyStep","mathExpressionError","handleClickArrow","target","matches","historyStepBack","historyStepNext","numbers","operations","exception","dotCommaDouble","operatorDouble","dotCommaOperation","operatorDotComma","isError","currentMathExpession","map","number","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a9f57fc.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport \"./Toggle.css\";\nconst styleVaribles = [\n  {\n    nameVaribles: \"--main-calculator-bg-color\",\n    colorVaribles: \"#010808\",\n  },\n  {\n    nameVaribles: \"--main-button-bg-color\",\n    colorVaribles: \"#08151a\",\n  },\n  {\n    nameVaribles: \"--extra-button-bg-color\",\n    colorVaribles: \"#0a3d3e\",\n  },\n  {\n    nameVaribles: \"--equals-button-bg-color\",\n    colorVaribles: \"#249c91\",\n  },\n  {\n    nameVaribles: \"--main-font-color\",\n    colorVaribles: \"#feffff\",\n  },\n]\nexport default class Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n    };\n  }\n  handleChange = () => {\n    new Promise((resolve) => {\n      this.setState({\n        active: !this.state.active,\n      });\n      resolve();\n    }).then(() => {\n      if (this.state.active) {\n        styleVaribles.forEach((obj) => {\n          document.body.style.setProperty(obj.nameVaribles, obj.colorVaribles);\n        });\n      } else {\n        document.body.style.cssText = \"\";\n      }\n    });\n  };\n  render() {\n    return (\n      <label className=\"toggle\">\n        <input type=\"checkbox\" onChange={this.handleChange}></input>\n        <span className=\"toggle-item toggle-round\"></span>\n      </label>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Toggle from \"./Toggle/Toggle\";\nimport \"./App.css\";\nimport calculate from \"./calculate\";\n\nfunction ButtonsArrow(props) {\n  return (\n    <div className=\"buttons-arrow\">\n      <button\n        className=\"button-arrow button-arrow-left\"\n        onClick={props.handleClick}\n      >\n        {\"<\"}\n      </button>\n      <button\n        className=\"button-arrow button-arrow-right\"\n        onClick={props.handleClick}\n      >\n        {\">\"}\n      </button>\n    </div>\n  );\n}\nfunction ButtonNum(props) {\n  return (\n    <button\n      className=\"button-number\"\n      onClick={() => props.handleClick(props.num)}\n    >\n      {props.num}\n    </button>\n  );\n}\nfunction ButtonOperation(props) {\n  return (\n    <button\n      className={`${props.className ?? \"\"} button-operation`}\n      onClick={() => props.handleClick(props.operation)}\n    >\n      {props.operation}\n    </button>\n  );\n}\nfunction InputField(props) {\n  return (\n    <input\n      type=\"text\"\n      className=\"input-field\"\n      placeholder=\"0\"\n      value={props.value}\n      onChange={props.handleChange}\n      onKeyPress={(event) =>\n        event.key === \"Enter\" ? props.calculateExpression() : null\n      }\n    />\n  );\n}\nfunction MessageErrorExpression(props) {\n  return <p className=\"error-expression\">{props.message}</p>;\n}\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\"];\n    this.operations = [\"+\", \"±\", \"−\", \"×\", \"÷\", \"%\", \"C\", \"=\"];\n    this.state = {\n      history: [\n        {\n          mathExpression: \"\",\n          result: \"\",\n        },\n      ],\n      mathExpressionError: \"\",\n      mathExpression: \"\",\n      historyStep: 0,\n    };\n  }\n  validateMathExpression() {\n    const reg = {\n      exception: /[^0-9+/:÷*×−.,-]/i,\n      dotCommaDouble: /[.,][.,]/i,\n      operatorDouble: /[+/:÷*×−-][+/:÷*×−-]/i,\n      dotCommaOperation: /[.,][+/:÷*×−-]/i,\n      operatorDotComma: /[+/:÷*×−-][.,]/i,\n    };\n    const state = this.state.mathExpression;\n    let isError = false;\n    if (state.match(/[/:÷]0/i) && !state.match(/[/:÷]0[.,]\\d{0,}/i)) {\n      this.setState({\n        mathExpressionError: \"Деление на ноль запрещено\",\n      });\n      return false;\n    }\n    if (state === \"\" || state.length < 3 || !state.match(/[+/:÷*×−-]/i)) {\n      isError = true;\n    }\n    for (const key in reg) {\n      if (state.match(reg[key])) {\n        isError = true;\n      }\n    }\n    if (isError) {\n      this.setState({\n        mathExpressionError: \"Некоректное выражение\",\n      });\n      return false;\n    } else {\n      this.setState({\n        mathExpressionError: \"\",\n      });\n      return true;\n    }\n  }\n  handleChange = (event) => {\n    this.resetError();\n    this.setState({ mathExpression: event.currentTarget.value });\n  };\n  calculateExpression = () => {\n    const history = this.state.history.slice();\n    const validateResult = this.validateMathExpression();\n    let result = null;\n    if (!validateResult) {\n      return;\n    } else {\n      result = calculate(this.state.mathExpression);\n      if (!isFinite(result)) {\n        this.setState({\n          mathExpressionError: \"Неизвестная ошибка\",\n        });\n        return;\n      }\n    }\n    this.setState((state) => ({\n      history: [\n        ...history,\n        {\n          mathExpression: state.mathExpression,\n          result,\n        },\n      ],\n      historyStep: state.historyStep + 1,\n      mathExpression: `${result}`,\n    }));\n  };\n  resetError = () => {\n    if (this.state.mathExpressionError !== \"\") {\n      this.setState({\n        mathExpressionError: \"\",\n      });\n    }\n  };\n\n  handleClick = (value) => {\n    switch (value) {\n      case \"C\":\n        this.resetError();\n        this.setState({ mathExpression: \"\" });\n        break;\n      case \"=\":\n        this.calculateExpression();\n        break;\n      case \"±\":\n        break;\n      case \"%\":\n        break;\n      default:\n        this.resetError();\n        this.setState((state) => ({\n          mathExpression: `${state.mathExpression}${value}`,\n        }));\n        break;\n    }\n  };\n  handleClickArrow = (event) => {\n    const historyStep = this.state.historyStep;\n    const history = this.state.history;\n    if (event.target.matches(\".button-arrow-left\")) {\n      const historyStepBack = historyStep - 1;\n      if (historyStepBack >= 0) {\n        this.setState({\n          historyStep: historyStepBack,\n          mathExpression: history[historyStepBack].result,\n        });\n      }\n    } else if (event.target.matches(\".button-arrow-right\")) {\n      const historyStepNext = historyStep + 1;\n      if (historyStepNext < history.length) {\n        this.setState({\n          historyStep: historyStepNext,\n          mathExpression: history[historyStepNext].result,\n        });\n      }\n    }\n  };\n  render() {\n    const history = this.state.history;\n    const currentMathExpession = history[this.state.historyStep].mathExpression;\n    return (\n      <div className=\"calculator\">\n        <ButtonsArrow handleClick={this.handleClickArrow}></ButtonsArrow>\n        {this.state.mathExpressionError === \"\" ? null : (\n          <MessageErrorExpression message={this.state.mathExpressionError} />\n        )}\n        <p className=\"calculator__previous-result\">{currentMathExpession}</p>\n        <InputField\n          handleChange={this.handleChange}\n          value={this.state.mathExpression}\n          calculateExpression={this.calculateExpression}\n          resetError={this.resetError}\n        ></InputField>\n        <div className=\"calculator__buttons\">\n          {this.numbers.map((number) => {\n            return (\n              <ButtonNum\n                num={number}\n                key={number}\n                handleClick={this.handleClick}\n              ></ButtonNum>\n            );\n          })}\n          {this.operations.map((operation) => {\n            if (operation === \"=\") {\n              return (\n                <ButtonOperation\n                  key={operation}\n                  operation={operation}\n                  className=\"button-equals\"\n                  handleClick={this.handleClick}\n                ></ButtonOperation>\n              );\n            }\n            return (\n              <ButtonOperation\n                key={operation}\n                operation={operation}\n                handleClick={this.handleClick}\n              ></ButtonOperation>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Toggle></Toggle>\n      <Calculator></Calculator>\n    </div>\n  );\n}\n","export default function calculate(str) {\n  const reg = {\n    operators: /[+/:÷*×−-]/i,\n  };\n  function createStack(string) {\n    const conversionOperator = (operator) => {\n      switch (operator) {\n        case \"÷\":\n        case \":\":\n          return \"/\";\n        case \"×\":\n          return \"*\";\n        case \",\":\n          return \".\";\n        case \"−\":\n          return \"-\";\n        default:\n          return operator;\n      }\n    };\n    const splitString = string.split(\"\");\n    const stack = [];\n    let currentNum = \"\";\n    splitString.forEach((symbol) => {\n      if (!isNaN(symbol) || symbol === \".\" || symbol === \",\") {\n        currentNum += conversionOperator(symbol);\n      }\n      if (symbol.match(reg.operators)) {\n        stack.push(+currentNum);\n        currentNum = \"\";\n        stack.push(conversionOperator(symbol));\n      }\n    });\n    stack.push(+currentNum);\n    return stack;\n  }\n  function calculateStack(stack) {\n    const _stack = [...stack];\n    const calculateExpression = (x, y, operation) => {\n      switch (operation) {\n        case \"+\":\n          return x + y;\n        case \"-\":\n          return x - y;\n        case \"*\":\n          return x * y;\n        case \"/\":\n          return x / y;\n        default:\n          break;\n      }\n    };\n    const searchIndexOperator = (arr) => {\n      if (arr.includes(\"*\") && arr.includes(\"/\")) {\n        const indexOperator1 = arr.indexOf(\"*\", 1);\n        const indexOperator2 = arr.indexOf(\"/\", 1);\n        if (indexOperator1 < indexOperator2) {\n          return indexOperator1;\n        } else if (indexOperator2 < indexOperator1) {\n          return indexOperator2;\n        }\n      } else if (arr.includes(\"*\")) {\n        return arr.indexOf(\"*\",1);\n      } else if (arr.includes(\"/\")) {\n        return arr.indexOf(\"/\",1);\n      }\n      return -1;\n    };\n    while (_stack.length > 2) {\n      const indexOperator = searchIndexOperator(_stack);\n      if (indexOperator !== -1) {\n        let res = calculateExpression(\n          _stack[indexOperator - 1],\n          _stack[indexOperator + 1],\n          _stack[indexOperator]\n        );\n        _stack.splice(indexOperator - 1, 3, res);\n      } else {\n        let res = calculateExpression(_stack[0], _stack[2], _stack[1]);\n        _stack.shift();\n        _stack.shift();\n        _stack.shift();\n        _stack.unshift(res);\n      }\n    }\n    return _stack[0];\n  }\n  try {\n    const stack = createStack(str);\n    const result = calculateStack(stack);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n}\n","import './index.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}