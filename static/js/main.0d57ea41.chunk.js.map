{"version":3,"sources":["app/components/toggle/Toggle.js","app/components/Buttons.js","app/App.js","calculate.js","index.js"],"names":["styleVaribles","nameVaribles","colorVaribles","Toggle","props","handleChange","Promise","resolve","setState","active","state","then","forEach","obj","document","body","style","setProperty","cssText","className","type","onChange","this","Component","numbers","operators","ButtonNum","onClick","handleClick","num","ButtonOperation","operation","Buttons","map","number","operator","ButtonsArrow","InputField","placeholder","value","onKeyPress","event","key","calculateExpression","MessageErrorExpression","message","Calculator","resetError","mathExpression","currentTarget","history","slice","validateResult","validateMathExpression","result","str","stack","_stack","calculateOneExpression","x","y","toFixed","searchIndexOperator","arr","includes","indexOperator1","indexOf","indexOperator2","length","indexOperator","res","splice","shift","unshift","calculateStack","string","conversionOperator","splitString","split","currentNum","symbol","isNaN","match","push","createStack","error","console","calculate","isFinite","historyStep","mathExpressionError","handleClickButton","handleClickArrow","historyStepNext","target","innerText","regExpValidate","exception","dotCommaDouble","operatorDouble","dotCommaOperation","operatorDotComma","isError","currentMathExpession","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d57ea41.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Toggle.css';\nconst styleVaribles = [\n  {\n    nameVaribles: '--main-calculator-bg-color',\n    colorVaribles: '#010808',\n  },\n  {\n    nameVaribles: '--main-button-bg-color',\n    colorVaribles: '#08151a',\n  },\n  {\n    nameVaribles: '--extra-button-bg-color',\n    colorVaribles: '#0a3d3e',\n  },\n  {\n    nameVaribles: '--equals-button-bg-color',\n    colorVaribles: '#249c91',\n  },\n  {\n    nameVaribles: '--main-font-color',\n    colorVaribles: '#feffff',\n  },\n];\nexport default class Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n    };\n  }\n  handleChange = () => {\n    new Promise(resolve => {\n      this.setState({\n        active: !this.state.active,\n      });\n      resolve();\n    }).then(() => {\n      if (this.state.active) {\n        styleVaribles.forEach(obj => {\n          document.body.style.setProperty(obj.nameVaribles, obj.colorVaribles);\n        });\n      } else {\n        document.body.style.cssText = '';\n      }\n    });\n  };\n  render() {\n    return (\n      <label className=\"toggle\">\n        <input type=\"checkbox\" onChange={this.handleChange}></input>\n        <span className=\"toggle-item toggle-round\"></span>\n      </label>\n    );\n  }\n}\n","const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '.'];\nconst operators = ['+', '±', '−', '×', '÷', '%', 'C', '='];\n\nfunction ButtonNum(props) {\n  return (\n    <button\n      className=\"button-number\"\n      onClick={() => props.handleClick(props.num)}>\n      {props.num}\n    </button>\n  );\n}\nfunction ButtonOperation(props) {\n  return (\n    <button\n      className={`${props.className ?? ''} button-operation`}\n      onClick={() => props.handleClick(props.operation)}>\n      {props.operation}\n    </button>\n  );\n}\n\nexport const Buttons = props => {\n  return (\n    <div className=\"calculator__buttons\">\n      {numbers.map(number => {\n        return (\n          <ButtonNum\n            num={number}\n            key={number}\n            handleClick={props.handleClick}></ButtonNum>\n        );\n      })}\n      {operators.map(operator => {\n        if (operator === '=') {\n          return (\n            <ButtonOperation\n              key={operator}\n              operation={operator}\n              className=\"button-equals\"\n              handleClick={props.handleClick}></ButtonOperation>\n          );\n        }\n        return (\n          <ButtonOperation\n            key={operator}\n            operation={operator}\n            handleClick={props.handleClick}></ButtonOperation>\n        );\n      })}\n    </div>\n  );\n};\n","import { Component } from 'react';\n\nimport calculate from '../calculate';\n\nimport Toggle from './components/toggle/Toggle';\nimport { Buttons } from './components/Buttons';\n\nimport './App.css';\n\nfunction ButtonsArrow(props) {\n  return (\n    <div className=\"buttons-arrow\">\n      <button\n        className=\"button-arrow button-arrow-left\"\n        onClick={props.handleClick}>\n        {'<'}\n      </button>\n      <button\n        className=\"button-arrow button-arrow-right\"\n        onClick={props.handleClick}>\n        {'>'}\n      </button>\n    </div>\n  );\n}\nfunction InputField(props) {\n  return (\n    <input\n      type=\"text\"\n      className=\"input-field\"\n      placeholder=\"0\"\n      value={props.value}\n      onChange={props.handleChange}\n      onKeyPress={event =>\n        event.key === 'Enter' ? props.calculateExpression() : null\n      }\n    />\n  );\n}\nfunction MessageErrorExpression(props) {\n  return <p className=\"error-expression\">{props.message}</p>;\n}\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          mathExpression: '',\n          result: '',\n        },\n      ],\n      mathExpressionError: '',\n      mathExpression: '',\n      historyStep: 0,\n    };\n  }\n  validateMathExpression() {\n    const regExpValidate = {\n      exception: /[^0-9+/:÷*×−.,-]/i,\n      dotCommaDouble: /[.,][.,]/i,\n      operatorDouble: /[+/:÷*×−-][+/:÷*×−-]/i,\n      dotCommaOperation: /[.,][+/:÷*×−-]/i,\n      operatorDotComma: /[+/:÷*×−-][.,]/i,\n    };\n    const state = this.state.mathExpression;\n    let isError = false;\n    if (state.match(/[/:÷]0/i) && !state.match(/[/:÷]0[.,]\\d{0,}/i)) {\n      this.setState({\n        mathExpressionError: 'Деление на ноль запрещено',\n      });\n      return false;\n    }\n    if (state === '' || state.length < 3 || !state.match(/[+/:÷*×−-]/i)) {\n      isError = true;\n    }\n    for (const key in regExpValidate) {\n      if (state.match(regExpValidate[key])) {\n        isError = true;\n        break;\n      }\n    }\n    if (isError) {\n      this.setState({\n        mathExpressionError: 'Некоректное выражение',\n      });\n      return false;\n    } else {\n      this.setState({\n        mathExpressionError: '',\n      });\n      return true;\n    }\n  }\n  handleChange = event => {\n    this.resetError();\n    this.setState({ mathExpression: event.currentTarget.value });\n  };\n  calculateExpression = () => {\n    const history = this.state.history.slice();\n    const validateResult = this.validateMathExpression();\n    let result = null;\n    if (!validateResult) {\n      return;\n    } else {\n      result = calculate(this.state.mathExpression);\n      if (!isFinite(result)) {\n        this.setState({\n          mathExpressionError: 'Неизвестная ошибка',\n        });\n        return;\n      }\n    }\n    this.setState(state => ({\n      history: [\n        ...history,\n        {\n          mathExpression: state.mathExpression,\n          result,\n        },\n      ],\n      historyStep: state.historyStep + 1,\n      mathExpression: `${result}`,\n    }));\n  };\n  resetError = () => {\n    if (this.state.mathExpressionError !== '') {\n      this.setState({\n        mathExpressionError: '',\n      });\n    }\n  };\n  handleClickButton = value => {\n    switch (value) {\n      case 'C':\n        this.resetError();\n        this.setState({ mathExpression: '' });\n        break;\n      case '=':\n        this.calculateExpression();\n        break;\n      case '±':\n        break;\n      case '%':\n        break;\n      default:\n        this.resetError();\n        this.setState(state => ({\n          mathExpression: `${state.mathExpression}${value}`,\n        }));\n        break;\n    }\n  };\n  handleClickArrow = event => {\n    const historyStep = this.state.historyStep;\n    const history = this.state.history;\n    const currentButton = event.target.innerText === '<' ? 'left' : 'right';\n    let historyStepNext = historyStep;\n    if (currentButton === 'left') {\n      historyStepNext = historyStep - 1 >= 0 ? historyStep - 1 : historyStep;\n    } else {\n      historyStepNext =\n        historyStep + 1 < history.length ? historyStep + 1 : historyStep;\n    }\n    this.setState({\n      historyStep: historyStepNext,\n      mathExpression: history[historyStepNext].result,\n    });\n  };\n  render() {\n    const history = this.state.history;\n    const currentMathExpession = history[this.state.historyStep].mathExpression;\n    return (\n      <div className=\"calculator\">\n        <ButtonsArrow handleClick={this.handleClickArrow}></ButtonsArrow>\n        {this.state.mathExpressionError === '' ? null : (\n          <MessageErrorExpression message={this.state.mathExpressionError} />\n        )}\n        <p className=\"calculator__previous-result\">{currentMathExpession}</p>\n        <InputField\n          handleChange={this.handleChange}\n          value={this.state.mathExpression}\n          calculateExpression={this.calculateExpression}\n          resetError={this.resetError}></InputField>\n        <Buttons handleClick={this.handleClickButton}></Buttons>\n      </div>\n    );\n  }\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Toggle />\n      <Calculator />\n    </div>\n  );\n}\n","export default function calculate(str) {\n  function createStack(string) {\n    const operators = /[+/:÷*×−-]/i;\n    const conversionOperator = operator => {\n      switch (operator) {\n        case '÷':\n        case ':':\n          return '/';\n        case '×':\n          return '*';\n        case ',':\n          return '.';\n        case '−':\n          return '-';\n        default:\n          return operator;\n      }\n    };\n    const splitString = string.split('');\n    const stack = [];\n    let currentNum = '';\n    splitString.forEach(symbol => {\n      if (!isNaN(symbol) || symbol === '.' || symbol === ',') {\n        currentNum += conversionOperator(symbol);\n      }\n      if (symbol.match(operators)) {\n        stack.push(+currentNum);\n        currentNum = '';\n        stack.push(conversionOperator(symbol));\n      }\n    });\n    stack.push(+currentNum);\n    return stack;\n  }\n  function calculateStack(stack) {\n    const _stack = [...stack];\n    const calculateOneExpression = (x, y, operation) => {\n      switch (operation) {\n        case '+':\n          return +(x + y).toFixed(3);\n        case '-':\n          return +(x - y).toFixed(3);\n        case '*':\n          return +(x * y).toFixed(3);\n        case '/':\n          return +(x / y).toFixed(3);\n        default:\n          break;\n      }\n    };\n    const searchIndexOperator = arr => {\n      if (arr.includes('*') && arr.includes('/')) {\n        const indexOperator1 = arr.indexOf('*', 1);\n        const indexOperator2 = arr.indexOf('/', 1);\n        if (indexOperator1 < indexOperator2) {\n          return indexOperator1;\n        } else if (indexOperator2 < indexOperator1) {\n          return indexOperator2;\n        }\n      } else if (arr.includes('*')) {\n        return arr.indexOf('*', 1);\n      } else if (arr.includes('/')) {\n        return arr.indexOf('/', 1);\n      }\n      return -1;\n    };\n    while (_stack.length > 2) {\n      const indexOperator = searchIndexOperator(_stack);\n      if (indexOperator !== -1) {\n        let res = calculateOneExpression(\n          _stack[indexOperator - 1],\n          _stack[indexOperator + 1],\n          _stack[indexOperator]\n        );\n        _stack.splice(indexOperator - 1, 3, res);\n      } else {\n        let res = calculateOneExpression(_stack[0], _stack[2], _stack[1]);\n        _stack.shift();\n        _stack.shift();\n        _stack.shift();\n        _stack.unshift(res);\n      }\n    }\n    return _stack[0];\n  }\n  try {\n    const stack = createStack(str);\n    const result = calculateStack(stack);\n    return result;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}